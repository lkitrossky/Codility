// https://app.codility.com/cert/view/certFRBP67-8M6AXD558U4DAY4Z/
/*
Codility confirms that a person who identified to us on-line as:
Levi Kitrossky
was awarded
Codility Golden Award for the Cuprum 2018 Challenge
This is the 44th Codility Golden Award granted this month.
*/

#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<stack>
#include<set>
#include<queue>
#include<map>
#include<set>
#include<string>
#include<climits>
#include<cstring>
#include<iomanip>
#include "stdint.h"
using namespace std;

//https://www.geeksforgeeks.org/find-the-largest-subarray-with-0-sum/
//https://app.codility.com/cert/view/cert6CEH3C-D7XD4DMB2P7DJTYG/details/
// some results incorrect but no complaints for time
long long index1(char c) {  //make symbols continuously stored
	if (c >= '0' && c <= '9')
		return c - '0';
	if (c >= 'a' && c <= 'z')
		return c - 'a' + 10;  //'a' will be after '9'
	return -1;
}
long long translate(char c) {
	long long code = index1(c) + 1;
	long long d = code / 16;
	long long r = code % 16;
	long long res = 1;
	for (int i = 0; i < d; i++) {
		res = (long long)(res << 16);
	}
	if (r > 0) {
		res = (long long)(res << r);
	}
	return res;
}

int solution(string &S) {
	

	int n = S.length();
	if (n < 2)
		return 0;
	if (2 == n && S.front() == S.back()) {
		return 2;
	}
	if (2 == n && S.front() != S.back()) {
		return 0;
	}

	vector<long long>codedS;
	for (auto au = S.begin(); au != S.end(); au++) {
		codedS.push_back(translate(*au));
	}

	map<long long, int> xors;
	long long xorAll = 0;
	int res = 0;
	for (int i = 0; i < (int)codedS.size(); i++)
	{
		xorAll = xorAll ^ codedS[i];

		if (codedS[i] == 0 && res == 0)
			res = 1;

		if (xorAll == 0)
			res = i + 1;

		if (xors.find(xorAll) != xors.end()) {
			int prev = xors.find(xorAll)->second;
			res = max(res, i - prev);
		}
		else {
			xors.insert(pair<long long, int>(xorAll, i));
		}
	}
	return res;
}
